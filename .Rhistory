is_documentary = case_when(
str_detect(genre_names, "Documentary") ~ 1,
TRUE ~ 0,
),
is_drama = case_when(
str_detect(genre_names, "Drama") ~ 1,
TRUE ~ 0
),
is_family = case_when (
str_detect(genre_names, "Family") ~ 1,
TRUE ~ 0
),
is_fantasy = case_when (
str_detect(genre_names, "Fantasy") ~ 1,
TRUE ~ 0
),
is_music = case_when (
str_detect(genre_names, "Music") ~ 1,
TRUE ~ 0
),
is_mystery = case_when (
str_detect(genre_names, "Mystery") ~ 1,
TRUE ~ 0
),
is_romance = case_when (
str_detect(genre_names, "Romance") ~ 1,
TRUE ~ 0
),
is_science_fiction = case_when (
str_detect(genre_names, "Science Fiction") ~ 1,
TRUE ~ 0
),
is_thriller = case_when (
str_detect(genre_names, "Thriller") ~ 1,
TRUE ~ 0
),
is_tv_movie = case_when (
str_detect(genre_names, "TV Movie") ~ 1,
TRUE ~ 0
),
is_war = case_when (
str_detect(genre_names, "War") ~ 1,
TRUE ~ 0
),
is_western = case_when (
str_detect(genre_names, "Western") ~ 1,
TRUE ~ 0
)
)
#Compiling Counts for the Movie Sub genres and totaling their amounts.
genre_counts_by_decade <- function(time_period) {
genre_counts <- movie_genres %>%
filter(decade_released == time_period) %>%
summarize(
Adventure = sum(is_adventure) / n(),
Animation = sum(is_animation)/ n(),
Crime = sum(is_crime)/ n(),
Comedy = sum(is_comedy)/ n(),
Documentary = sum(is_documentary)/ n(),
Drama = sum(is_drama)/ n(),
Family = sum(is_family)/ n(),
Fantasy = sum(is_fantasy)/ n(),
Music = sum(is_music)/ n(),
Mystery = sum(is_mystery)/ n(),
Romance = sum(is_romance)/ n(),
Science_Fiction = sum(is_science_fiction)/ n(),
Thriller = sum(is_thriller)/ n(),
TV_Movie = sum(is_tv_movie)/ n(),
War = sum(is_war)/ n(),
Western = sum(is_western)/ n()
) %>%
t()
}
genre_vector <- c("Adventure","Animation","Crime", "Comedy","Documentary","Drama","Family","Fantasy","Music","Mystery","Romance","Science Fiction", "Thriller", "TV Movie", "War", "Western")
genre_counts <- data.frame(genre_vector,
genre_counts_by_decade('1950-1959'),
genre_counts_by_decade('1960-1969'),
genre_counts_by_decade('1970-1979'),
genre_counts_by_decade('1980-1989'),
genre_counts_by_decade('1990-1999'),
genre_counts_by_decade('2000-2009'),
genre_counts_by_decade('2010-2019'),
genre_counts_by_decade('2020-pres'))
rownames(genre_counts) <- NULL
genre_counts <- as_tibble(genre_counts)
genre_counts <- genre_counts %>%
rename(`genre name`="genre_vector",
`1950-1959` ="genre_counts_by_decade..1950.1959..",
`1960-1969` ="genre_counts_by_decade..1960.1969..",
`1970-1979` ="genre_counts_by_decade..1970.1979..",
`1980-1989` ="genre_counts_by_decade..1980.1989..",
`1990-1999` ="genre_counts_by_decade..1990.1999..",
`2000-2009` ="genre_counts_by_decade..2000.2009..",
`2010-2019` ="genre_counts_by_decade..2010.2019..",
`2020-pres` ="genre_counts_by_decade..2020.pres.."
) %>%
arrange(desc(`2020-pres`))
genre_counts_melt <- reshape2::melt(genre_counts) %>%
mutate(value = round(value, 2))
p<-genre_counts_melt %>%
ggplot(aes(x = variable, y = fct_reorder(`genre name`, value) , fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkred", high = "white") +
geom_text(aes(label = scales::percent(value))) +
labs(
title = "Share of secondary Genres that appear alongside Horror By Decade",
caption = "How to Interpret: Horror Movies that Include a 'Thriller' tag make up 24% of movies released in 2020-pres."
)+
ylab("Genre")+
xlab("Decade")
plotly::ggplotly(p)
head(horror_movies$genre_names)
horror_movies %>%
head(genre_names)
horror_movies %>%
head(genre_names)
horror_movies$genre_names %>%
head()
horror_movies$genre_names %>%
head() %>% tibble()
horror_movies %>%
select(genre_names) %>%
head()
en_movies %>%
select(title, genre_names) %>%
head()
View(en_movies)
library(tidyverse)
horror_movies <- read_csv("C:/Users/samir/Documents/GitHub/Horror-Movie-Data-Wrangling-Visualization/horror_movies.csv")
languages <- read.csv("C:/Users/samir/Documents/GitHub/Horror-Movie-Data-Wrangling-Visualization/list_of_iso_codes-934j.csv")
languages <- languages %>%
select(Language.name, X639.1) %>%
rename(original_language = X639.1)
#Wrangling for Average Run Time vs Popularity
horror_movies_runtime <- horror_movies %>%
mutate(original_language = str_replace_all(original_language, 'cn', 'zh')) %>%
filter(runtime != is.na(runtime)) %>%
select(original_language, runtime) %>%
group_by(original_language)%>%
summarise(median_runtime = median(runtime),
mean_runtime = mean(runtime),
number_movies = n()) %>%
arrange(desc(number_movies)) %>%
head(n=25)
horror_movies_runtime %>%
left_join(languages, by = 'original_language') %>%
ggplot(aes(forcats::fct_reorder(Language.name, -median_runtime), median_runtime))+
geom_col() +
geom_text(aes(label = median_runtime, vjust = -0.5)) +
xlab('Language') +
ylab('Median Minutes of Movie')+
ggtitle('Movie Language vs. Runtime')+
theme_minimal()
#Applying Decade Categories for the Release Year
horror_movies <- horror_movies %>%
filter(status == 'Released') %>%
mutate(decade_released = case_when(
year(release_date) >= 1950 & year(release_date) < 1960 ~ "1950-1959",
year(release_date) >= 1960 & year(release_date) < 1970 ~ "1960-1969",
year(release_date) >= 1970 & year(release_date) < 1980 ~ "1970-1979",
year(release_date) >= 1980 & year(release_date) < 1989 ~ "1980-1989",
year(release_date) >= 1990 & year(release_date) < 1999 ~ "1990-1999",
year(release_date) >= 2000 & year(release_date) < 2009 ~ "2000-2009",
year(release_date) >= 2010 & year(release_date) < 2019 ~ "2010-2019",
TRUE ~ "2020-pres"
))
#English Movies Only
en_movies <- horror_movies %>%
filter (original_language == 'en')
en_movies %>%
group_by(decade_released) %>%
count() %>%
ggplot(aes(decade_released, n))+
geom_col() +
geom_text(aes(label = n), nudge_y = 500) +
theme_minimal() +
labs(
title = "Count of English Horror Movies in each decade",
caption = "English Released Movies Only"
)+
xlab("Decade")+
ylab("Count")
en_movies %>%
filter(!is.na(runtime) & !is.na(popularity)) %>%
ggplot(aes(runtime, popularity)) +
geom_point(alpha = 0.5, colour = 'darkred') +
geom_smooth() +
scale_y_continuous(trans = 'log10') +
coord_cartesian(xlim=c(40,150)) +
labs(
title = "Runtime vs Popularity of Movie",
caption = "English Movies Only"
)
en_movies %>%
select(title, genre_names) %>%
head()
#Coding Dummy Variables for Each of the Movie Genres
movie_genres <- en_movies %>%
mutate(
is_horror = case_when(
str_detect(genre_names, "Horror") ~ 1,
TRUE ~ 0
),
is_adventure = case_when(
str_detect(genre_names, "Adventure") ~ 1,
TRUE ~0
),
is_animation = case_when(
str_detect(genre_names, "Animation") ~ 1,
TRUE ~ 0
),
is_crime = case_when(
str_detect(genre_names, "Crime") ~ 1,
TRUE ~ 0
),
is_comedy = case_when(
str_detect(genre_names, "Comedy") ~ 1,
TRUE ~ 0,
),
is_documentary = case_when(
str_detect(genre_names, "Documentary") ~ 1,
TRUE ~ 0,
),
is_drama = case_when(
str_detect(genre_names, "Drama") ~ 1,
TRUE ~ 0
),
is_family = case_when (
str_detect(genre_names, "Family") ~ 1,
TRUE ~ 0
),
is_fantasy = case_when (
str_detect(genre_names, "Fantasy") ~ 1,
TRUE ~ 0
),
is_music = case_when (
str_detect(genre_names, "Music") ~ 1,
TRUE ~ 0
),
is_mystery = case_when (
str_detect(genre_names, "Mystery") ~ 1,
TRUE ~ 0
),
is_romance = case_when (
str_detect(genre_names, "Romance") ~ 1,
TRUE ~ 0
),
is_science_fiction = case_when (
str_detect(genre_names, "Science Fiction") ~ 1,
TRUE ~ 0
),
is_thriller = case_when (
str_detect(genre_names, "Thriller") ~ 1,
TRUE ~ 0
),
is_tv_movie = case_when (
str_detect(genre_names, "TV Movie") ~ 1,
TRUE ~ 0
),
is_war = case_when (
str_detect(genre_names, "War") ~ 1,
TRUE ~ 0
),
is_western = case_when (
str_detect(genre_names, "Western") ~ 1,
TRUE ~ 0
)
)
#Compiling Counts for the Movie Sub genres and totaling their amounts.
genre_counts_by_decade <- function(time_period) {
genre_counts <- movie_genres %>%
filter(decade_released == time_period) %>%
summarize(
Adventure = sum(is_adventure) / n(),
Animation = sum(is_animation)/ n(),
Crime = sum(is_crime)/ n(),
Comedy = sum(is_comedy)/ n(),
Documentary = sum(is_documentary)/ n(),
Drama = sum(is_drama)/ n(),
Family = sum(is_family)/ n(),
Fantasy = sum(is_fantasy)/ n(),
Music = sum(is_music)/ n(),
Mystery = sum(is_mystery)/ n(),
Romance = sum(is_romance)/ n(),
Science_Fiction = sum(is_science_fiction)/ n(),
Thriller = sum(is_thriller)/ n(),
TV_Movie = sum(is_tv_movie)/ n(),
War = sum(is_war)/ n(),
Western = sum(is_western)/ n()
) %>%
t()
}
genre_vector <- c("Adventure","Animation","Crime", "Comedy","Documentary","Drama","Family","Fantasy","Music","Mystery","Romance","Science Fiction", "Thriller", "TV Movie", "War", "Western")
genre_counts <- data.frame(genre_vector,
genre_counts_by_decade('1950-1959'),
genre_counts_by_decade('1960-1969'),
genre_counts_by_decade('1970-1979'),
genre_counts_by_decade('1980-1989'),
genre_counts_by_decade('1990-1999'),
genre_counts_by_decade('2000-2009'),
genre_counts_by_decade('2010-2019'),
genre_counts_by_decade('2020-pres'))
rownames(genre_counts) <- NULL
genre_counts <- as_tibble(genre_counts)
genre_counts <- genre_counts %>%
rename(`genre name`="genre_vector",
`1950-1959` ="genre_counts_by_decade..1950.1959..",
`1960-1969` ="genre_counts_by_decade..1960.1969..",
`1970-1979` ="genre_counts_by_decade..1970.1979..",
`1980-1989` ="genre_counts_by_decade..1980.1989..",
`1990-1999` ="genre_counts_by_decade..1990.1999..",
`2000-2009` ="genre_counts_by_decade..2000.2009..",
`2010-2019` ="genre_counts_by_decade..2010.2019..",
`2020-pres` ="genre_counts_by_decade..2020.pres.."
) %>%
arrange(desc(`2020-pres`))
genre_counts_melt <- reshape2::melt(genre_counts) %>%
mutate(value = round(value, 2))
p<-genre_counts_melt %>%
ggplot(aes(x = variable, y = fct_reorder(`genre name`, value) , fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkred", high = "white") +
geom_text(aes(label = scales::percent(value))) +
labs(
title = "Share of secondary Genres that appear alongside Horror By Decade",
caption = "How to Interpret: Horror Movies that Include a 'Thriller' tag make up 24% of movies released in 2020-pres."
)+
ylab("Genre")+
xlab("Decade")
plotly::ggplotly(p)
blogdown:::preview_site()
en_movies %>%
select(title, genre_names) %>%
filter(str_detect(genre_names, "Comedy"))
head()
en_movies %>%
select(title, genre_names) %>%
filter(str_detect(genre_names, "Comedy")) %>%
head()
en_movies %>%
select(title, genre_names) %>%
filter(str_detect(genre_names, "Comedy")) %>%
head(20)
en_movies %>%
select(title, genre_names, decade_released) %>%
filter(str_detect(genre_names, "Comedy") & decade_released == "2020-pres") %>%
head(20)
en_movies %>%
select(title, genre_names, decade_released) %>%
filter(str_detect(genre_names, "Comedy") & decade_released == "2020-pres") %>%
head(50)
en_movies %>%
select(title, genre_names, decade_released) %>%
filter(str_detect(genre_names, "Comedy") & decade_released == "2020-pres") %>%
head(100)
en_movies %>%
select(title, genre_names) %>%
head()
blogdown:::preview_site()
en_movies %>%
select(title, genre_names) %>%
head()
library(tidyverse)
horror_movies <- read_csv("C:/Users/samir/Documents/GitHub/Horror-Movie-Data-Wrangling-Visualization/horror_movies.csv")
languages <- read.csv("C:/Users/samir/Documents/GitHub/Horror-Movie-Data-Wrangling-Visualization/list_of_iso_codes-934j.csv")
languages <- languages %>%
select(Language.name, X639.1) %>%
rename(original_language = X639.1)
en_movies %>%
select(title, genre_names) %>%
head()
library(tidyverse)
library(jsonlite)
library(rtweet)
library(tidytext)
raw_Tweets <- read_file(file = here::here("tweet.js"))
json <- sub("window.YTD.tweet.part0 = ", "", raw_Tweets)
raw_Tweets <- fromJSON(json)
raw_Tweets <- raw_Tweets$tweet
raw_Tweets <- read_file(file = here::here("tweets.js"))
raw_Tweets <- read_file(file = here::here("tweets.js"))
json <- sub("window.YTD.tweet.part0 = ", "", raw_Tweets)
raw_Tweets <- fromJSON(json)
raw_Tweets <- read_file(file = here::here("tweets.js"))
json <- sub("window.YTD.tweets.part0 = ", "", raw_Tweets)
raw_Tweets <- fromJSON(json)
raw_Tweets <- raw_Tweets$tweet
library(tidyverse)
library(jsonlite)
library(rtweet)
library(tidytext)
raw_Tweets <- read_file(file = here::here("tweets.js"))
json <- sub("window.YTD.tweets.part0 = ", "", raw_Tweets)
raw_Tweets <- fromJSON(json)
raw_Tweets <- raw_Tweets$tweet
clean_Tweets <- raw_Tweets %>%
filter(retweeted == FALSE) %>%
filter(!str_detect(full_text, "^RT "),
!str_detect(full_text, "^https")) %>%
mutate(retweet_count = as.integer(retweet_count),
full_text = str_replace_all(full_text, "https://t.co/[a-zA-Z0-9]*", ""),
full_text = str_replace_all(full_text, "@[a-zA-Z0-9_]*", ""))
clean_Tweets %>%
select(retweet_count, full_text) %>%
arrange(desc(retweet_count)) %>%
head(n = 5)
clean_Tweets %>%
mutate(`tweet source` = str_extract(source, "Twitter [A-Za-z ]*")) %>%
filter(!is.na(`tweet source`))  %>%
ggplot() +
geom_bar(aes(`tweet source`))
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+")) %>%
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
library(wordcloud)
library(wordcloud2)
twitter_wordcloud <- wordcloud(words = tweets$words,
freq = tweets$n,
min.freq = 5,
random.color = TRUE)
twitter_wordcloud2 <- wordcloud2(data = tweets)
twitter_wordcloud2
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+") & words == "wordle") %>%
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+") & words != "wordle") %>%
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
twitter_wordcloud2 <- wordcloud2(data = tweets)
twitter_wordcloud2
twitter_wordcloud2 <- wordcloud2(data = tweets)
twitter_wordcloud2
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+") & words != c("wordle", "gonna")) %>%   #As of March 2023, I have filtered "Wordle" out of my most commonly tweeted words.
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+") & words != c("wordle", "gonna", "gonna")) %>%   #As of March 2023, I have filtered "Wordle" out of my most commonly tweeted words.
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+") & words != c("wordle", "gonna")) %>%   #As of March 2023, I have filtered "Wordle" out of my most commonly tweeted words.
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
library(wordcloud)
library(wordcloud2)
twitter_wordcloud <- wordcloud(words = tweets$words,
freq = tweets$n,
min.freq = 5,
random.color = TRUE)
twitter_wordcloud2 <- wordcloud2(data = tweets)
twitter_wordcloud2
View(tweets)
tweets <- clean_Tweets %>%
select(full_text) %>%
unnest_tokens(words, full_text)
tweets <- tweets %>%
mutate(words = str_replace_all(words, "’", "'")) %>%
anti_join(stop_words, by = c("words" = "word")) %>%
filter(!str_detect(words, "^[0-9]+") & words != c("wordle", "gonna", "gonna", "wordle")) %>%   #As of March 2023, I have filtered "Wordle" out of my most commonly tweeted words.
count(words) %>%
arrange(desc(n))
tweets %>% head(n=10)
library(wordcloud)
library(wordcloud2)
twitter_wordcloud <- wordcloud(words = tweets$words,
freq = tweets$n,
min.freq = 5,
random.color = TRUE)
twitter_wordcloud2 <- wordcloud2(data = tweets)
twitter_wordcloud2
blogdown:::preview_site()
blogdown::serve_site()
